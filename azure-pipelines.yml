trigger:
- dev

pr:
- dev

variables:
- name: ssh_key_secure_file
  value: 'file'  # Replace with the actual name of your Secure File

pool:
  vmImage: 'ubuntu-latest'

jobs:
  - job: terraform_approval
    displayName: "Terraform Approval"
    steps:
      - script: 
          echo "Terraform Approval Job"
        displayName: 'Terraform Approval'
        condition: succeededOrFailed()

  - job: manual_approval
    displayName: "Manual Approval"
    dependsOn: terraform_approval
    pool:
      vmImage: 'ubuntu-latest'
    variables:
      ssh_key_secure_file: 'file'
    steps:
      - script: 
          echo "Manual Approval Job"
        displayName: 'Manual Approval'
        condition: succeededOrFailed()

      - task: DownloadSecureFile@1
        name: downloadSSHKey
        displayName: 'Download SSH Key'
        inputs:
          secureFile: $(ssh_key_secure_file)
          retryCount: 3

      - script: |
          mkdir -p $(Agent.HomeDirectory)/.ssh
          cp $(Agent.TempDirectory)/$(ssh_key_secure_file) $(Agent.HomeDirectory)/.ssh/id_rsa
          chmod 600 $(Agent.HomeDirectory)/.ssh/id_rsa
          ls -l $(Agent.HomeDirectory)/.ssh  # Add this line to list files in the .ssh directory
          if [ -f "$(Agent.HomeDirectory)/.ssh/id_rsa" ]; then
            echo "Private key file exists."
          else
            echo "Private key file does not exist."
            exit 1
          fi

          ssh-keygen -y -f $(Agent.HomeDirectory)/.ssh/id_rsa > $(Agent.HomeDirectory)/.ssh/id_rsa.pub
          ls -l $(Agent.HomeDirectory)/.ssh  # Add this line to list files in the .ssh directory
          if [ -f "$(Agent.HomeDirectory)/.ssh/id_rsa.pub" ]; then
            echo "Public key file exists."
          else
            echo "Public key file does not exist."
            exit 1
          fi
        displayName: 'Configure SSH Key'

      - script: |
          cd $(Build.SourcesDirectory)/rose
          terraform init
        displayName: 'Terraform Init'

      - script: |
          cd $(Build.SourcesDirectory)/rose
          terraform validate
        displayName: 'Terraform Validate'

      - script: |
          az login 
        displayName: 'Azure Login'  

      - script: |
          cd $(Build.SourcesDirectory)/rose
          terraform plan -out=tfplan
        displayName: 'Terraform Plan'

  - job: manual_intervention
    displayName: 'Manual Approval Intervention'
    dependsOn: manual_approval
    pool: server
    steps:
      - task: ManualValidation@0
        timeoutInMinutes: 5
        inputs:
          instructions: 'Please review and manually approve the Terraform changes.'

  - job: apply_changes
    displayName: 'Apply Terraform Changes'
    dependsOn: manual_intervention
    pool:
      vmImage: 'ubuntu-latest'
    steps:
      - script: |
          cd $(Build.SourcesDirectory)/rose
          terraform init
          az login 
          terraform apply -auto-approve 
        displayName: 'Apply Terraform Changes'
